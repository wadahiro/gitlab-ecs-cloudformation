Description: >
    This template deploys an ECS cluster to the provided VPC and subnets 
    using an Auto Scaling Group

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    InstanceType: 
        Description: Which instance type should we use to build the ECS cluster?
        Type: String
        Default: c4.large

    ClusterSize:
        Description: How many ECS hosts do you want to initially deploy?
        Type: Number
        Default: 4

    VPC:
        Description: Choose which VPC this ECS cluster should be deployed to
        Type: AWS::EC2::VPC::Id

    Subnets:
        Description: Choose which subnets this ECS cluster should be deployed to
        Type: List<AWS::EC2::Subnet::Id>

    SecurityGroup:
        Description: Select the Security Group to use for the ECS cluster hosts
        Type: AWS::EC2::SecurityGroup::Id

    KeyName:
        Description: KeyName
        Type: String
        Default: ""

    RootCACrt:
        Description: ROOT CA Certificate
        Type: String

    ProxyHost:
        Description: Proxy host
        Type: String

    ProxyPort:
        Description: Proxy port
        Type: Number

    DNSServer:
        Description: DNS server
        Type: String
        Default: ""

    GitLabURL:
        Description: GitLab URL
        Type: String

    RunnerRegistrationToken:
        Description: Runner registration token
        Type: String
        Default: ""

    RunnerConcurrent:
        Description: Runner Concurrent
        Type: Number
        Default: 1

    RunnerCheckInterval:
        Description: Runner check interval
        Type: Number
        Default: 0

    RunnerEnvironment:
        Description: Runner environment
        Type: String
        Default: ""

    RunnerExtraHosts:
        Description: Runner extra_hosts
        Type: String
        Default: ""

    RunnerPrivileged:
        Description: Runner privileged
        Type: String
        Default: false

    RunnerPullPolicy:
        Description: Runner pull_policy
        Type: String
        Default: if-not-present


Conditions:
    AddKey:
        !Not [ !Equals [ !Ref KeyName, "" ] ]

Mappings:

    # These are the latest ECS optimized AMIs as of February 2017:
    #
    #   amzn-ami-2016.09.f-amazon-ecs-optimized
    #   ECS agent:    1.14.0
    #   Docker:       1.12.6
    #   ecs-init:     1.14.0-2
    #
    # You can find the latest available on this page of our documentation:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
    # (note the AMI identifier is region specific) 

    AWSRegionToAMI:
        us-east-1:
            AMI: ami-b2df2ca4
        us-east-2:
            AMI: ami-832b0ee6
        us-west-1:
            AMI: ami-dd104dbd
        us-west-2:
            AMI: ami-022b9262
        eu-west-1:
            AMI: ami-a7f2acc1
        eu-west-2:
            AMI: ami-3fb6bc5b
        eu-central-1:
            AMI: ami-ec2be583
        ap-northeast-1:
            AMI: ami-f63f6f91
        ap-southeast-1:
            AMI: ami-a88530cb
        ap-southeast-2:
            AMI: ami-8af8ffe9
        ca-central-1:
            AMI: ami-ead5688e

Resources:

    ECSCluster:
        Type: AWS::ECS::Cluster
        Properties:
            ClusterName: !Ref EnvironmentName

    ECSAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties: 
            VPCZoneIdentifier: !Ref Subnets
            LaunchConfigurationName: !Ref ECSLaunchConfiguration
            MinSize: !Ref ClusterSize
            MaxSize: !Ref ClusterSize
            DesiredCapacity: !Ref ClusterSize
            Tags: 
                - Key: Name
                  Value: !Sub ${EnvironmentName} ECS host
                  PropagateAtLaunch: true
        CreationPolicy:
            AutoScalingCreationPolicy:
                MinSuccessfulInstancesPercent: 0
            ResourceSignal: 
                Timeout: PT15M
        UpdatePolicy:
            AutoScalingRollingUpdate:
                MinInstancesInService: 0
                MinSuccessfulInstancesPercent: 0
                MaxBatchSize: 1
                PauseTime: PT15M
                WaitOnResourceSignals: true
        
    ECSLaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            ImageId:  !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
            InstanceType: !Ref InstanceType
            SecurityGroups: 
                - !Ref SecurityGroup
            IamInstanceProfile: !Ref ECSInstanceProfile
            KeyName: !If [AddKey, !Ref KeyName, !Ref "AWS::NoValue"]
            UserData: 
                "Fn::Base64": !Sub |
                    #cloud-boothook
                    #!/bin/bash

                    PROXY_HOST=${ProxyHost}
                    PROXY_PORT=${ProxyPort}
                    NO_PROXY=169.254.169.254,169.254.170.2,/var/run/docker.sock

                    # Update ROOT CA Certificate
                    cat << EOS > /etc/pki/ca-trust/source/anchors/rootca.crt
                    -----BEGIN CERTIFICATE-----
                    ${RootCACrt}
                    -----END CERTIFICATE-----
                    EOS
                    update-ca-trust

                    # Set Yum HTTP proxy
                    if [ ! -f /var/lib/cloud/instance/sem/config_yum_http_proxy ]; then
                        echo "proxy=http://$PROXY_HOST:$PROXY_PORT" >> /etc/yum.conf
                        echo "$$: $(date +%s.%N | cut -b1-13)" > /var/lib/cloud/instance/sem/config_yum_http_proxy
                    fi

                    # Set Docker HTTP proxy
                    if [ ! -f /var/lib/cloud/instance/sem/config_docker_http_proxy ]; then
                        echo "export http_proxy=http://$PROXY_HOST:$PROXY_PORT/" >> /etc/sysconfig/docker
                        echo "export no_proxy=$NO_PROXY" >> /etc/sysconfig/docker
                        echo "$$: $(date +%s.%N | cut -b1-13)" > /var/lib/cloud/instance/sem/config_docker_http_proxy
                    fi

                    # Set ECS agent HTTP proxy
                    if [ ! -f /var/lib/cloud/instance/sem/config_ecs-agent_http_proxy ]; then
                        echo "ECS_CLUSTER=${ECSCluster}" >> /etc/ecs/ecs.config
                        echo "HTTP_PROXY=$PROXY_HOST:$PROXY_PORT" >> /etc/ecs/ecs.config
                        echo "NO_PROXY=$NO_PROXY" >> /etc/ecs/ecs.config
                        echo "$$: $(date +%s.%N | cut -b1-13)" > /var/lib/cloud/instance/sem/config_ecs-agent_http_proxy
                    fi

                    yum install -y aws-cfn-bootstrap
                    /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration --http-proxy=http://$PROXY_HOST:$PROXY_PORT --https-proxy=http://$PROXY_HOST:$PROXY_PORT
                    /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup --http-proxy=http://$PROXY_HOST:$PROXY_PORT --https-proxy=http://$PROXY_HOST:$PROXY_PORT

        Metadata:
            AWS::CloudFormation::Init:
                config:
                    commands:
                        gitlab_runner_register:
                            command: !Sub |
                                ps -ef | grep docker >> /var/log/gitlab-runner-register.log 
                    files:
                        "/etc/cfn/cfn-hup.conf":
                            mode: 000400
                            owner: root
                            group: root
                            content: !Sub |
                                [main]
                                stack=${AWS::StackId}
                                region=${AWS::Region}
                        
                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                            content: !Sub |
                                [cfn-auto-reloader-hook]
                                triggers=post.update
                                path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration --http-proxy=http://${ProxyHost}:${ProxyPort} --https-proxy=http://${ProxyHost}:${ProxyPort}

                        "/srv/gitlab-runner/config/config.toml":
                            content: !Sub |
                                concurrent = ${RunnerConcurrent}
                                check_interval = ${RunnerCheckInterval}

                        "/etc/init/gitlab-runner-register.conf":
                            mode: "000644"
                            owner: root
                            group: root
                            content: !Sub |
                                description "Register gitlab runner on Amazon ECS container instance"
                                author "wadahiro@gmail.com"
                                start on started ecs
                                
                                script
                                    exec 2>>/var/log/gitlab-runner-register.log
                                    set -x
                                
                                    until curl -s http://localhost:51678/v1/metadata
                                    do
                                        sleep 1
                                    done
                                
                                    AWSINSTANCEID=`curl -ss http://169.254.169.254/latest/meta-data/instance-id`

                                    docker run \
                                      --rm \
                                      -v /srv/gitlab-runner/config:/etc/gitlab-runner \
                                      --dns ${DNSServer} \
                                      gitlab/gitlab-runner:alpine-v1.11.1 register \
                                      --non-interactive \
                                      --description="${AWSINSTANCEID} in ${AWS::Region} (Created by ${AWS::StackName})"
                                      --url="${GitLabURL}" \
                                      --registration-token="${RunnerRegistrationToken}" \
                                      --executor="docker" \
                                      --docker-image=busyboox \
                                      --env=${RunnerEnvironment} \
                                      --docker-dns=${DNSServer} \
                                      --docker-privileged=${RunnerPrivileged} \
                                      --docker-extra-hosts=${RunnerExtraHosts} \
                                      --docker-volumes=/var/run/docker.sock:/var/run/docker.sock \
                                      --docker-pull-policy=${RunnerPullPolicy}

                                end script

                    services: 
                        sysvinit:
                            cfn-hup: 
                                enabled: true
                                ensureRunning: true
                                files: 
                                    - /etc/cfn/cfn-hup.conf
                                    - /etc/cfn/hooks.d/cfn-auto-reloader.conf

    # This IAM Role is attached to all of the ECS hosts. It is based on the default role
    # published here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
    #
    # You can add other IAM policy statements here to allow access from your ECS hosts
    # to other AWS services. Please note that this role will be used by ALL containers
    # running on the ECS host.

    ECSRole:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            RoleName: !Sub ${EnvironmentName}-ECSRole-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": { 
                            "Service": "ec2.amazonaws.com" 
                        }
                    }]
                }
            Policies: 
                - PolicyName: ecs-service
                  PolicyDocument: |
                    {
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "ecs:CreateCluster",
                                "ecs:DeregisterContainerInstance",
                                "ecs:DiscoverPollEndpoint",
                                "ecs:Poll",
                                "ecs:RegisterContainerInstance",
                                "ecs:StartTelemetrySession",
                                "ecs:Submit*",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
                                "ecr:BatchCheckLayerAvailability",
                                "ecr:BatchGetImage",
                                "ecr:GetDownloadUrlForLayer",
                                "ecr:GetAuthorizationToken"
                            ],
                            "Resource": "*"
                        }]
                    }

    ECSInstanceProfile: 
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles: 
                - !Ref ECSRole

Outputs:

    Cluster:
        Description: A reference to the ECS cluster
        Value: !Ref ECSCluster

